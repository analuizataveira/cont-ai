window.jest_html_reporters_callback__({"numFailedTestSuites":1,"numFailedTests":8,"numPassedTestSuites":1,"numPassedTests":6,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":2,"numTotalTests":14,"startTime":1749053358507,"success":false,"testResults":[{"numFailingTests":0,"numPassingTests":5,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1749053368947,"runtime":9090,"slow":true,"start":1749053359857},"testFilePath":"D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\tests\\user.test.ts","failureMessage":null,"testResults":[{"ancestorTitles":["User Controller (integração)"],"duration":153,"failureMessages":[],"fullName":"User Controller (integração) deve criar um novo usuário","status":"passed","title":"deve criar um novo usuário"},{"ancestorTitles":["User Controller (integração)"],"duration":106,"failureMessages":[],"fullName":"User Controller (integração) não deve permitir criação de usuário com e-mail já existente","status":"passed","title":"não deve permitir criação de usuário com e-mail já existente"},{"ancestorTitles":["User Controller (integração)"],"duration":192,"failureMessages":[],"fullName":"User Controller (integração) deve autenticar um usuário com credenciais válidas","status":"passed","title":"deve autenticar um usuário com credenciais válidas"},{"ancestorTitles":["User Controller (integração)"],"duration":11,"failureMessages":[],"fullName":"User Controller (integração) não deve autenticar com e-mail inválido","status":"passed","title":"não deve autenticar com e-mail inválido"},{"ancestorTitles":["User Controller (integração)"],"duration":166,"failureMessages":[],"fullName":"User Controller (integração) não deve autenticar com senha incorreta","status":"passed","title":"não deve autenticar com senha incorreta"}]},{"numFailingTests":8,"numPassingTests":1,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1749053372917,"runtime":13038,"slow":true,"start":1749053359879},"testFilePath":"D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\tests\\records.test.ts","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mRecords Controller (integração) › deve criar um novo registro\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 15 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 17 |\u001b[39m     expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m201\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     expect(response\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mdescription)\u001b[33m.\u001b[39mtoBe(\u001b[32m\"Salário\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/tests/records.test.ts\u001b[39m\u001b[0m\u001b[2m:17:29)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mRecords Controller (integração) › deve retornar todos os registros\u001b[39m\u001b[22m\n\n    EntityMetadataNotFoundError: No metadata for \"Record\" was found.\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat DataSource.getMetadata (\u001b[22m\u001b[2msrc/data-source/DataSource.ts\u001b[2m:451:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Repository.get metadata [as metadata] (\u001b[22m\u001b[2msrc/repository/Repository.ts\u001b[2m:54:40)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Repository.save (\u001b[22m\u001b[2msrc/repository/Repository.ts\u001b[2m:207:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/tests/records.test.ts\u001b[39m\u001b[0m\u001b[2m:22:16)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mRecords Controller (integração) › deve agrupar registros por mês\u001b[39m\u001b[22m\n\n    EntityMetadataNotFoundError: No metadata for \"Record\" was found.\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat DataSource.getMetadata (\u001b[22m\u001b[2msrc/data-source/DataSource.ts\u001b[2m:451:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Repository.get metadata [as metadata] (\u001b[22m\u001b[2msrc/repository/Repository.ts\u001b[2m:54:40)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Repository.save (\u001b[22m\u001b[2msrc/repository/Repository.ts\u001b[2m:207:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/tests/records.test.ts\u001b[39m\u001b[0m\u001b[2m:35:16)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mRecords Controller (integração) › deve atualizar um registro existente\u001b[39m\u001b[22m\n\n    EntityMetadataNotFoundError: No metadata for \"Record\" was found.\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat DataSource.getMetadata (\u001b[22m\u001b[2msrc/data-source/DataSource.ts\u001b[2m:451:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Repository.get metadata [as metadata] (\u001b[22m\u001b[2msrc/repository/Repository.ts\u001b[2m:54:40)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Repository.save (\u001b[22m\u001b[2msrc/repository/Repository.ts\u001b[2m:207:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/tests/records.test.ts\u001b[39m\u001b[0m\u001b[2m:59:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mRecords Controller (integração) › deve deletar um registro existente\u001b[39m\u001b[22m\n\n    EntityMetadataNotFoundError: No metadata for \"Record\" was found.\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat DataSource.getMetadata (\u001b[22m\u001b[2msrc/data-source/DataSource.ts\u001b[2m:451:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Repository.get metadata [as metadata] (\u001b[22m\u001b[2msrc/repository/Repository.ts\u001b[2m:54:40)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Repository.save (\u001b[22m\u001b[2msrc/repository/Repository.ts\u001b[2m:207:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/tests/records.test.ts\u001b[39m\u001b[0m\u001b[2m:77:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mRecords Controller (integração) › não deve atualizar um registro inexistente\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m404\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 108 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 109 |\u001b[39m     expect(res\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 110 |\u001b[39m     expect(res\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m\"error\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"Not found.\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 111 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 112 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/tests/records.test.ts\u001b[39m\u001b[0m\u001b[2m:109:24)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mRecords Controller (integração) › não deve deletar um registro inexistente\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m404\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 114 |\u001b[39m     \u001b[36mconst\u001b[39m res \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39m\u001b[36mdelete\u001b[39m(\u001b[32m\"/api/records/9999\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 115 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 116 |\u001b[39m     expect(res\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 117 |\u001b[39m     expect(res\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m\"error\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"Not found.\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 118 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 119 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/tests/records.test.ts\u001b[39m\u001b[0m\u001b[2m:116:24)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mRecords Controller (integração) › não deve retornar um registro inexistente por ID\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m404\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 121 |\u001b[39m     \u001b[36mconst\u001b[39m res \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request(app)\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m\"/api/records/9999\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 122 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 123 |\u001b[39m     expect(res\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 124 |\u001b[39m     expect(res\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m\"error\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"Not found.\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 125 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 126 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/tests/records.test.ts\u001b[39m\u001b[0m\u001b[2m:123:24)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["Records Controller (integração)"],"duration":48,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\tests\\records.test.ts:17:29)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Records Controller (integração) deve criar um novo registro","status":"failed","title":"deve criar um novo registro"},{"ancestorTitles":["Records Controller (integração)"],"duration":0,"failureMessages":["EntityMetadataNotFoundError: No metadata for \"Record\" was found.\n    at DataSource.getMetadata (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\data-source\\DataSource.ts:451:30)\n    at Repository.get metadata [as metadata] (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\repository\\Repository.ts:54:40)\n    at Repository.save (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\repository\\Repository.ts:207:18)\n    at Object.<anonymous> (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\tests\\records.test.ts:22:16)\n    at Promise.then.completed (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-runner\\build\\runTest.js:444:34)\n    at Object.worker (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-runner\\build\\testWorker.js:106:12)"],"fullName":"Records Controller (integração) deve retornar todos os registros","status":"failed","title":"deve retornar todos os registros"},{"ancestorTitles":["Records Controller (integração)"],"duration":2,"failureMessages":["EntityMetadataNotFoundError: No metadata for \"Record\" was found.\n    at DataSource.getMetadata (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\data-source\\DataSource.ts:451:30)\n    at Repository.get metadata [as metadata] (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\repository\\Repository.ts:54:40)\n    at Repository.save (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\repository\\Repository.ts:207:18)\n    at Object.<anonymous> (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\tests\\records.test.ts:35:16)\n    at Promise.then.completed (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-runner\\build\\runTest.js:444:34)\n    at Object.worker (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-runner\\build\\testWorker.js:106:12)"],"fullName":"Records Controller (integração) deve agrupar registros por mês","status":"failed","title":"deve agrupar registros por mês"},{"ancestorTitles":["Records Controller (integração)"],"duration":1,"failureMessages":["EntityMetadataNotFoundError: No metadata for \"Record\" was found.\n    at DataSource.getMetadata (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\data-source\\DataSource.ts:451:30)\n    at Repository.get metadata [as metadata] (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\repository\\Repository.ts:54:40)\n    at Repository.save (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\repository\\Repository.ts:207:18)\n    at Object.<anonymous> (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\tests\\records.test.ts:59:30)\n    at Promise.then.completed (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-runner\\build\\runTest.js:444:34)\n    at Object.worker (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-runner\\build\\testWorker.js:106:12)"],"fullName":"Records Controller (integração) deve atualizar um registro existente","status":"failed","title":"deve atualizar um registro existente"},{"ancestorTitles":["Records Controller (integração)"],"duration":2,"failureMessages":["EntityMetadataNotFoundError: No metadata for \"Record\" was found.\n    at DataSource.getMetadata (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\data-source\\DataSource.ts:451:30)\n    at Repository.get metadata [as metadata] (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\repository\\Repository.ts:54:40)\n    at Repository.save (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\repository\\Repository.ts:207:18)\n    at Object.<anonymous> (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\tests\\records.test.ts:77:30)\n    at Promise.then.completed (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-runner\\build\\runTest.js:444:34)\n    at Object.worker (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-runner\\build\\testWorker.js:106:12)"],"fullName":"Records Controller (integração) deve deletar um registro existente","status":"failed","title":"deve deletar um registro existente"},{"ancestorTitles":["Records Controller (integração)"],"duration":25,"failureMessages":[],"fullName":"Records Controller (integração) não deve criar registro com dados inválidos","status":"passed","title":"não deve criar registro com dados inválidos"},{"ancestorTitles":["Records Controller (integração)"],"duration":35,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\tests\\records.test.ts:109:24)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Records Controller (integração) não deve atualizar um registro inexistente","status":"failed","title":"não deve atualizar um registro inexistente"},{"ancestorTitles":["Records Controller (integração)"],"duration":33,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\tests\\records.test.ts:116:24)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Records Controller (integração) não deve deletar um registro inexistente","status":"failed","title":"não deve deletar um registro inexistente"},{"ancestorTitles":["Records Controller (integração)"],"duration":18,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\src\\tests\\records.test.ts:123:24)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Records Controller (integração) não deve retornar um registro inexistente por ID","status":"failed","title":"não deve retornar um registro inexistente por ID"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":false,"collectCoverageFrom":[],"coverageDirectory":"D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\coverage","coverageProvider":"babel","coverageReporters":["json","text","lcov","clover"],"detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":false,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":7,"noStackTrace":false,"nonFlagArgs":[],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"passWithNoTests":false,"projects":[],"reporters":[["default",{}],["D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\jest-html-reporters\\index.js",{"publicPath":"./src/test-report","filename":"report.html","openReport":false}]],"rootDir":"D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai","runTestsByPath":false,"seed":697887911,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPattern":"","testSequencer":"D:\\Inatel\\P9\\cont-ai\\backend\\cont-ai\\node_modules\\@jest\\test-sequencer\\build\\index.js","updateSnapshot":"new","useStderr":false,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false},"endTime":1749053373096,"_reporterOptions":{"publicPath":"./src/test-report","filename":"report.html","expand":false,"pageTitle":"","hideIcon":false,"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":false,"stripSkippedTest":false},"logInfoMapping":{},"attachInfos":{}})